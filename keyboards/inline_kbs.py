from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db_handler.postgres_func import get_activity_levels_list
from datetime import datetime

def change_profile_kb():
    inline_kb_list = [
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='change_profile')],
        [InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='back_home')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_kb_list)


def get_new_product_kb():
    button = InlineKeyboardButton(text="–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç", callback_data='new_product')
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])
    return keyboard
    return keyboard

def get_new_meal_kb(product_id, weight):
    if weight!='None':
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π –ø—Ä–∏—ë–º (–≤ –≥—Ä–∞–º–º–∞—Ö)", callback_data=f'new_meal:grams:{product_id}:{weight}')],
             [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π –ø—Ä–∏—ë–º (–≤ —à—Ç—É–∫–∞—Ö)", callback_data=f'new_meal:items:{product_id}:{weight}')],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data=f'product:delete:{product_id}')]])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π –ø—Ä–∏—ë–º (–≤ –≥—Ä–∞–º–º–∞—Ö)",
                                  callback_data=f'new_meal:grams:{product_id}:')],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data=f'product:delete:{product_id}')]])
    return keyboard

def get_products_inline_kb(page, user_id, items, max_items=6):
    builder = InlineKeyboardBuilder()
    subitems = items[page*max_items:(page+1)*max_items]
    for item in subitems:
        builder.row(
            InlineKeyboardButton(
                text=item.name,
                callback_data=f'view_product:{user_id}:{item.product_id}:{item.weight}'
            )
        )
    if page>0:
        builder.row(
            InlineKeyboardButton(
                text='‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data=f'product_pagination:back:{user_id}:{page-1}'
            )
        )

    if page+1 < len(items)/max_items:
        builder.row(
            InlineKeyboardButton(
                text='–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è',
                callback_data=f'product_pagination:next:{user_id}:{page+1}'
            )
        )
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder.row(InlineKeyboardButton(text="–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç ‚ûï", callback_data='new_product'))
    builder.row(InlineKeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º üßÆ", callback_data='new_product_calc'))
    builder.adjust(2)
    return builder.as_markup()

def get_meals_inline_kb(page, user_id, items, max_items=6):
    builder = InlineKeyboardBuilder()
    subitems = items[page*max_items:(page+1)*max_items]
    for item in subitems:
        builder.row(
            InlineKeyboardButton(
                text=item['date'].strftime("%m/%d/%Y %H:%M:%S"),
                callback_data=f'view_meal:{user_id}:{item['meal_id']}'
            )
        )
    if page>0:
        builder.row(
            InlineKeyboardButton(
                text='‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data=f'meal_pagination:back:{user_id}:{page-1}'
            )
        )

    if page+1 < len(items)/max_items:
        builder.row(
            InlineKeyboardButton(
                text='–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è',
                callback_data=f'meal_pagination:next:{user_id}:{page+1}'
            )
        )
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder.row(InlineKeyboardButton(text="–û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data='meals:week'))
    builder.row(InlineKeyboardButton(text="–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü", callback_data='meals:month'))
    builder.adjust(2)
    return builder.as_markup()


def create_qst_inline_kb(questions: dict) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    for question_id, question_data in questions.items():
        builder.row(
            InlineKeyboardButton(
                text=question_data.get('qst'),
                callback_data=f'qst_{question_id}'
            )
        )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    builder.row(
        InlineKeyboardButton(
            text='–ù–∞ –≥–ª–∞–≤–Ω—É—é',
            callback_data='back_home'
        )
    )
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder.adjust(2)
    return builder.as_markup()

def get_login_tg():
    kb_list = [
        [InlineKeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –ª–æ–≥–∏–Ω —Å –¢–ì", callback_data='in_login')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard

def check_data():
    kb_list = [
        [InlineKeyboardButton(text="‚úÖ–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data='correct')],
        [InlineKeyboardButton(text="‚ùå–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data='incorrect')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard

def get_questionnaire():
    kb_list = [
        [InlineKeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data='fill_profile')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard

def create_skip_button() -> InlineKeyboardMarkup:
    kb_list = [
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_question')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard

def create_yes_no_kb() -> InlineKeyboardMarkup:
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    kb_list = [
        [InlineKeyboardButton(text="‚úÖ–î–∞", callback_data='yes')],
        [InlineKeyboardButton(text="‚ùå–ù–µ—Ç", callback_data='no')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard

def get_activity_levels_kb():
    kb_list = [[InlineKeyboardButton(text="1", callback_data='1'),
               InlineKeyboardButton(text="2", callback_data='2'),
               InlineKeyboardButton(text="3", callback_data='3'),
               InlineKeyboardButton(text="4", callback_data='4'),
               InlineKeyboardButton(text="5", callback_data='5')]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard

def create_add_product_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø—Ä–æ–¥—É–∫—Ç", callback_data='add_another_product')],
        [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏", callback_data='finish_meal')],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_question')]
    ])

def get_pressure_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è", callback_data='new_pressure')],
        [InlineKeyboardButton(text="–ò–º–ø–æ—Ä—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞–≤–ª–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data='import_pressure')],
        [InlineKeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞–≤–ª–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data='export_pressure')]
    ])

def get_drugs_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç", callback_data='new_drug')],
        [InlineKeyboardButton(text="–ò–º–ø–æ—Ä—Ç –ø—Ä–∏—ë–º–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data='import_drugs')],
        [InlineKeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–µ–º–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤", callback_data='export_drugs')]
    ])

def get_drugs_units_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–º–≥", callback_data='mg'),InlineKeyboardButton(text="–º–∫–≥", callback_data='mkg'),InlineKeyboardButton(text="–≥", callback_data='g')],
        [InlineKeyboardButton(text="–º–≥", callback_data='mg'),InlineKeyboardButton(text="–º–∫–≥", callback_data='mkg'),InlineKeyboardButton(text="–≥", callback_data='g')],
    ])

def get_drugs_inline_kb(page, user_id, items, max_items=6):
    builder = InlineKeyboardBuilder()
    subitems = items[page*max_items:(page+1)*max_items]
    for item in subitems:
        builder.row(
            InlineKeyboardButton(
                text=f'{item.name} {item.dosage} {item.measure} {item.admtime.strftime("%H:%M")}',
                callback_data=f'view_drug:{user_id}:{item.id}'
            )
        )
    if page>0:
        builder.row(
            InlineKeyboardButton(
                text='‚óÄÔ∏è –ù–∞–∑–∞–¥',
                callback_data=f'drug_pagination:back:{user_id}:{page-1}'
            )
        )

    if page+1 < len(items)/max_items:
        builder.row(
            InlineKeyboardButton(
                text='–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è',
                callback_data=f'drug_pagination:next:{user_id}:{page+1}'
            )
        )
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder.row(InlineKeyboardButton(text="–ù–æ–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ ‚ûï", callback_data='new_drug'))
    builder.row(InlineKeyboardButton(text="–ò–º–ø–æ—Ä—Ç –ø—Ä–∏—ë–º–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data='import_drugs'))
    builder.row(InlineKeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–µ–º–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤", callback_data='export_drugs'))
    builder.row(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", callback_data='delete_drug'))
    builder.adjust(2)
    return builder.as_markup()