from asyncpg.pgproto.pgproto import timedelta
from sqlalchemy import (create_engine, Column, BigInteger,
                        String, Integer, Text, Numeric, SmallInteger, Float, Boolean, ForeignKey, TIMESTAMP, func, TIME)
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.future import select
from decouple import config
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from sqlalchemy.future import select
from typing import List
import asyncio
from sqlalchemy.orm import relationship
from datetime import UTC, tzinfo
from sqlalchemy import desc
Base = declarative_base()


class Pressure(Base):
    __tablename__ = 'pressure'
    __table_args__ = {'schema': 'medicare'}  # –£–∫–∞–∑—ã–≤–∞–µ–º —Å—Ö–µ–º—É medicare

    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, nullable=False)  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    systolic = Column(Integer, nullable=False)  # –°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
    diastolic = Column(Integer, nullable=False)  # –î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
    pulse = Column(Integer, nullable=False)  # –ü—É–ª—å—Å
    date = Column(TIMESTAMP, server_default=func.current_timestamp(), nullable=False)  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
    comment = Column(Text, nullable=True)  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

class Drug(Base):
    __tablename__ = 'drugs'
    __table_args__ = {'schema': 'medicare'}

    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, nullable=False)
    name = Column(String, nullable=False)
    measure = Column(String, nullable=True)
    dosage = Column(Float, nullable=True)
    admtime = Column(TIME, nullable=False)  # –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    repeats = Column(String, nullable=True)
    datetime = Column(TIMESTAMP, server_default=func.current_timestamp(), nullable=False)

    # –û–¥–∏–Ω –∫–æ –º–Ω–æ–≥–∏–º —Å DrugAdm
    drug_adms = relationship("DrugAdm", back_populates="drug", cascade="all, delete-orphan")


class DrugAdm(Base):
    __tablename__ = 'drug_adm'
    __table_args__ = {'schema': 'medicare'}

    id = Column(Integer, primary_key=True, autoincrement=True)
    drug_id = Column(Integer, ForeignKey('medicare.drugs.id'), nullable=False)
    datetime = Column(TIMESTAMP, server_default=func.current_timestamp(), nullable=False)

    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å Drug
    drug = relationship("Drug", back_populates="drug_adms")

class Profile(Base):
    __tablename__ = 'profiles'
    __table_args__ = {'schema': 'medicare'}

    user_id = Column(BigInteger, primary_key=True)
    full_name = Column(String, nullable=True)
    user_login = Column(String, nullable=False)
    gender = Column(String, nullable=True)
    age = Column(Integer, nullable=True)
    city = Column(Text, nullable=True)
    timezone = Column(String, nullable=True)
    height = Column(Numeric, nullable=True)
    weight = Column(Numeric, nullable=True)
    activity_level = Column(SmallInteger, nullable=True)

class Product(Base):
    __tablename__ = 'products'
    __table_args__ = {'schema': 'medicare'}  # –£–∫–∞–∑—ã–≤–∞–µ–º —Å—Ö–µ–º—É medicare
    product_id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, primary_key=True)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    name = Column(String, nullable=False)  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    cal = Column(Float, nullable=True)  # –ö–∞–ª–æ—Ä–∏–∏
    proteins = Column(Float, nullable=True)  # –ë–µ–ª–∫–∏
    fats = Column(Float, nullable=True)  # –ñ–∏—Ä—ã
    carbohydrates = Column(Float, nullable=True)  # –£–≥–ª–µ–≤–æ–¥—ã
    photo_id = Column(Text, nullable=True)  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ
    is_favorite = Column(Boolean, nullable=False, default=False)
    weight = Column(Float, nullable=True)
    date = Column(TIMESTAMP, server_default=func.current_timestamp(), nullable=False)
    product_meals = relationship("ProductMeal", back_populates="product")


class Meal(Base):
    __tablename__ = 'meals'
    __table_args__ = {'schema': 'medicare'}

    meal_id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, nullable=False)  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    date = Column(TIMESTAMP, server_default=func.current_timestamp(), nullable=False)  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    photo_id = Column(Text, nullable=True)  # –§–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ
    product_meals = relationship("ProductMeal", back_populates="meal")
    def __repr__(self):
        return f"<Meal(meal_id={self.meal_id}, user_id={self.user_id}, date={self.date}, photo_id={self.photo_id})>"

class ProductMeal(Base):
    __tablename__ = 'product_meal'
    __table_args__ = {'schema': 'medicare'}

    product_meal_id = Column(Integer, primary_key=True, autoincrement=True)  # –î–æ–±–∞–≤–ª—è–µ–º serial –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–µ–π
    meal_id = Column(Integer, ForeignKey('medicare.meals.meal_id'), nullable=False)
    product_id = Column(Integer, ForeignKey('medicare.products.product_id'), nullable=False)
    weight = Column(Float, nullable=False)  # –ú–∞—Å—Å–∞ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    items = Column(Integer, nullable=True)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—à—Ç—É–∫–∏)
    meal = relationship("Meal", back_populates="product_meals")
    # –°–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π Product
    product = relationship("Product", back_populates="product_meals")
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = config('PG_LINK')
async_engine = create_async_engine(DATABASE_URL, future=True, echo=True)
AsyncSessionLocal = sessionmaker(async_engine, expire_on_commit=False, class_=AsyncSession)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ user_id
async def get_profile(user_id: int):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Profile).where(Profile.user_id == user_id))
        profile = result.scalar_one_or_none()
        return profile

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Upsert –ø—Ä–æ—Ñ–∏–ª—è
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Upsert –ø—Ä–æ—Ñ–∏–ª—è
async def upsert_profile(
    user_id: int, user_login: str, gender: str, age: int,
    city: str, timezone: str, height: float, activity_level: int, full_name=None, weight=None
):
    async with AsyncSessionLocal() as session:
        async with session.begin():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            profile = await session.execute(select(Profile).where(Profile.user_id == user_id))
            existing_profile = profile.scalar_one_or_none()

            if existing_profile:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                existing_profile.full_name = full_name
                existing_profile.user_login = user_login
                existing_profile.gender = gender
                existing_profile.age = age
                existing_profile.city = city
                existing_profile.timezone = timezone
                existing_profile.height = height
                existing_profile.weight = weight
                existing_profile.activity_level = activity_level
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                new_profile = Profile(
                    user_id=user_id,
                    full_name=full_name,
                    user_login=user_login,
                    gender=gender,
                    age=age,
                    city=city,
                    timezone=timezone,
                    height=height,
                    weight=weight,
                    activity_level=activity_level
                )
                session.add(new_profile)

            # –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            await session.commit()


async def get_products(user_id: int, page):
    async with AsyncSessionLocal() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        query = text("""
            SELECT * from medicare.products where user_id = :user_id
            order by is_favorite desc, date desc
        """)
        result = await session.execute(query, {"user_id": user_id})
        rows = result.fetchall()
        return rows


async def get_products_by_id(product_ids: list):
    async with AsyncSessionLocal() as session:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—Å–ª–æ–≤–∏–µ–º, —á—Ç–æ product_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ product_ids
        query = select(Product).where(Product.product_id.in_(product_ids)).order_by(Product.is_favorite.desc(), Product.date.desc())
        result = await session.execute(query)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        rows = result.scalars().all()
        return rows

async def get_user_profile(user_id: int):
    async with AsyncSessionLocal() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        query = text("""
            SELECT 
    user_id, 
    full_name,
    gender, 
    extract(YEAR FROM current_timestamp) - age AS age, 
    user_login, 
    city, 
    timezone, 
    height, 
    weight,
    ROUND(AVG(systolic)::numeric, 0) || '/' || ROUND(AVG(diastolic)::numeric, 0) AS pressure, 
    ROUND(AVG(pulse)::numeric, 0) AS pulse, 
    ROUND(AVG(value)::numeric, 0) AS glucose, 
    description,
    CASE gender
        WHEN 'üë®‚Äçü¶±–ú—É–∂—á–∏–Ω–∞' THEN ROUND(((88.362 + (13.397 * weight::numeric) + (4.799 * height::numeric) - (5.677 * (extract(YEAR FROM current_timestamp) - age))) * coef)::numeric, 0)
        WHEN 'üë©‚Äçü¶±–ñ–µ–Ω—â–∏–Ω–∞' THEN ROUND(((447.593 + (9.247 * weight::numeric) + (3.098 * height::numeric) - (4.330 * (extract(YEAR FROM current_timestamp) - age))) * coef)::numeric, 0)
    END AS metabolism, 
    ROUND((weight::numeric / ((height::numeric / 100) * (height::numeric / 100)))::numeric, 2) AS BMI
FROM 
    medicare.profiles pf
LEFT JOIN 
    medicare.pressure pp USING(user_id)
LEFT JOIN 
    medicare.glucose gg USING(user_id)
LEFT JOIN 
    medicare.activity_level USING(activity_level)
WHERE 
    user_id = :user_id
GROUP BY 
    user_id, full_name, description, coef, weight, height, age;
        """)
        result = await session.execute(query, {"user_id": user_id})
        row = result.fetchone()
        return row

async def get_activity_levels_list():
    async with AsyncSessionLocal() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        query = text("""
            select activity_level, description from medicare.activity_level
            order by activity_level asc
        """)
        result = await session.execute(query)
        rows = result.fetchall()
        return rows

async def upsert_product(
    user_id: int, name: str, cal: float, proteins: float, fats: float, carbohydrates: float,
    photo_id: str, is_favorite: bool, weight=None
):
    async with AsyncSessionLocal() as session:
        async with session.begin():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            product = await session.execute(select(Product).where(Product.user_id == user_id, Product.name == name))
            existing_product = product.scalar_one_or_none()

            if existing_product:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
                existing_product.cal = cal
                existing_product.proteins = proteins
                existing_product.fats = fats
                existing_product.carbohydrates = carbohydrates
                existing_product.photo_id = photo_id
                existing_product.is_favorite = is_favorite
                existing_product.weight = weight
                existing_product.date = datetime.now(UTC).replace(tzinfo=None)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
                new_product = Product(
                    user_id=user_id,
                    name=name,
                    cal=cal,
                    proteins=proteins,
                    fats=fats,
                    carbohydrates=carbohydrates,
                    photo_id=photo_id,
                    is_favorite=is_favorite,
                    weight = weight
                )
                session.add(new_product)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ product_id
async def get_product(product_id: int):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Product).where(Product.product_id == product_id))
        product = result.scalar_one_or_none()
        return product

async def get_meal(meal_id: int):
    async with AsyncSessionLocal() as session:
        products = []
        meals_query = (
            select(Meal)
            .options(
                joinedload(Meal.product_meals).joinedload(ProductMeal.product))  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ ProductMeal
            .filter(Meal.meal_id == meal_id))
        result = await session.execute(meals_query)
        meal = result.unique().scalar_one_or_none()
        if not meal:
            return
        meal_calories, meal_proteins, meal_fats, meal_carbohydrates = 0, 0, 0, 0
        for product_meal in meal.product_meals:
            product = product_meal.product
            if product:
                # –†–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–µ—Å–∞ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                if product_meal.items is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None
                    factor = float(product_meal.items) * (float(product.weight) if product.weight else 0) / 100.0
                elif product_meal.weight is not None:
                    factor = float(product_meal.weight or 0) / 100.0  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float, –µ—Å–ª–∏ None
                else:
                    factor = 1

                meal_calories += float(product.cal or 0) * factor
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float, –µ—Å–ª–∏ None
                meal_proteins += float(product.proteins or 0) * factor  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float, –µ—Å–ª–∏ None
                meal_fats += float(product.fats or 0) * factor  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float, –µ—Å–ª–∏ None
                meal_carbohydrates += float(product.carbohydrates or 0) * factor  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float, –µ—Å–ª–∏ None

                products.append({'product_id':product.product_id, 'product_name':product.name,
                                 'product_cal':product.cal, 'product_proteins':product.proteins})

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ –≤ –æ—Ç—á–µ—Ç
        print({'meal_id': meal.meal_id, 'photo_id': meal.photo_id, 'date': meal.date, 'cal': meal_calories,
             'proteins': meal_proteins, 'fats': meal_fats,
             'carbohydrates': meal_carbohydrates})
        return {'meal_id': meal.meal_id, 'photo_id': meal.photo_id, 'date': meal.date, 'cal': meal_calories,
             'proteins': meal_proteins, 'fats': meal_fats,
             'carbohydrates': meal_carbohydrates}


async def delete_product(product_id: int):
    async with AsyncSessionLocal() as session:
        async with session.begin():
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ product_id
            product = await session.execute(select(Product).where(Product.product_id == product_id))
            existing_product = product.scalar_one_or_none()

            if existing_product:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
                await session.delete(existing_product)
                await session.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                return f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} —É–¥–∞–ª–µ–Ω."
            else:
                return f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."



# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î

async def add_meal2db(data):
    async with AsyncSessionLocal() as session:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏
        new_meal = Meal(user_id=data['user_id'], photo_id=data.get('photo_id'))
        session.add(new_meal)
        await session.flush()  # –ü–æ–ª—É—á–∞–µ–º meal_id

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
        for product_data in data['products']:
            product_id = product_data.get('product_id')

            # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –ö–ë–ñ–£
            if product_id is None:
                new_product = Product(
                    user_id=data['user_id'],
                    name='–ü—Ä–æ–¥—É–∫—Ç –±–µ–∑ –∏–º–µ–Ω–∏',  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    cal=product_data.get('cal'),
                    proteins=product_data.get('proteins'),
                    fats=product_data.get('fats'),
                    carbohydrates=product_data.get('carbohydrates'),
                    is_favorite=False
                )
                session.add(new_product)
                await session.flush()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π product_id
                product_id = new_product.product_id

            # –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            new_product_meal = ProductMeal(
                meal_id=new_meal.meal_id,
                product_id=product_id,
                weight=product_data.get('weight'),
                items=product_data.get('items', None)  # –ú–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            )
            session.add(new_product_meal)

        await session.commit()
        return new_meal.meal_id


from sqlalchemy import select
from sqlalchemy.orm import joinedload
from datetime import datetime
import pytz


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
from datetime import datetime
import pytz
from decimal import Decimal


async def display_meal_report(user_id: int, start_date: datetime, end_date: datetime) -> dict:
    async with AsyncSessionLocal() as session:
        result_values = []
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è timezone –∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ metabolism –∏ protein_min
        user_profile = await session.execute(select(Profile).filter_by(user_id=user_id))
        profile = user_profile.scalar_one_or_none()

        if not profile:
            return {'display_string':'–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω', 'result_values':None}

        user_timezone = pytz.timezone(profile.timezone) if profile.timezone else pytz.UTC

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        start_date_local = user_timezone.localize(start_date)
        end_date_local = user_timezone.localize(end_date)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ naive –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î
        start_date_naive = start_date_local.astimezone(pytz.UTC).replace(tzinfo=None)
        end_date_naive = end_date_local.astimezone(pytz.UTC).replace(tzinfo=None)

        print(f'!!!!!!!!!!!!{start_date_naive} !!!!!!!!!!!{start_date_local}')

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º naive –¥–∞—Ç
        meals_query = (
            select(Meal)
            .options(
                joinedload(Meal.product_meals).joinedload(ProductMeal.product))  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ ProductMeal
            .filter(Meal.user_id == user_id)
            .filter(Meal.date >= start_date_naive)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º naive –¥–∞—Ç—É
            .filter(Meal.date <= end_date_naive)
            .order_by(desc(Meal.date)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º naive –¥–∞—Ç—É
        )
        result = await session.execute(meals_query)
        meals = result.unique().scalars().all()
        print('--------------------------------------------')
        print(meals)

        if not meals:
            return {"display_string":f"–ü—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", "result_values":None}

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ—Ä–º—ã –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∏ –±–µ–ª–∫–∞–º
        metabolism = calculate_metabolism(profile)
        protein_min = float(profile.weight or 0) * 1.2  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float, –µ—Å–ª–∏ None

        report_lines = []
        total_calories, total_proteins, total_fats, total_carbohydrates = 0, 0, 0, 0

        current_day = None
        day_totals = {
            "calories": 0,
            "proteins": 0,
            "fats": 0,
            "carbohydrates": 0,
        }

        for meal in meals:
            meal_time = meal.date.replace(tzinfo=UTC).astimezone(user_timezone)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if current_day is None or current_day != meal_time.date():
                if current_day:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
                    report_lines.append(format_day_totals(current_day, day_totals, metabolism, protein_min))
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
                current_day = meal_time.date()
                day_totals = {
                    "calories": 0,
                    "proteins": 0,
                    "fats": 0,
                    "carbohydrates": 0,
                }

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            meal_calories, meal_proteins, meal_fats, meal_carbohydrates = 0, 0, 0, 0
            for product_meal in meal.product_meals:
                product = product_meal.product
                if product:
                    # –†–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–µ—Å–∞ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                    if product_meal.items is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None
                        factor = float(product_meal.items) * (float(product.weight) if product.weight else 0) / 100.0
                    elif product_meal.weight is not None:
                        factor = float(product_meal.weight or 0) / 100.0  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float, –µ—Å–ª–∏ None
                    else:
                        factor = 1

                    meal_calories += float(product.cal or 0) * factor
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float, –µ—Å–ª–∏ None
                    meal_proteins += float(product.proteins or 0) * factor  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float, –µ—Å–ª–∏ None
                    meal_fats += float(product.fats or 0) * factor  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float, –µ—Å–ª–∏ None
                    meal_carbohydrates += float(product.carbohydrates or 0) * factor  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float, –µ—Å–ª–∏ None

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ –≤ –æ—Ç—á–µ—Ç
            report_lines.append(
                f"{meal_time.strftime('%d.%m.%Y %H:%M')} - {meal_calories:.0f} –∫–∫–∞–ª, "
                f"–ë–ñ–£ - {meal_proteins:.1f}/{meal_fats:.1f}/{meal_carbohydrates:.1f}"
            )

            result_values.append({'meal_id':meal.meal_id, 'photo_id':meal.photo_id, 'date':meal_time, 'cal':meal_calories,
                                  'proteins':meal_proteins, 'fats':meal_fats,
                                  'carbohydrates':meal_carbohydrates})

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –∏ –æ–±—â–∏–µ –∏—Ç–æ–≥–∏
            day_totals["calories"] += meal_calories
            day_totals["proteins"] += meal_proteins
            day_totals["fats"] += meal_fats
            day_totals["carbohydrates"] += meal_carbohydrates

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –≤ –æ—Ç—á–µ—Ç
        if current_day:
            report_lines.append(format_day_totals(current_day, day_totals, metabolism, protein_min))

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        # print(report_lines)
        print('--------------------------------------------')
        print({'display_string':"\n".join(report_lines), 'result_values':result_values})
        return {'display_string':"\n".join(report_lines), 'result_values':result_values}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from decimal import Decimal


def calculate_metabolism(profile):
    weight = float(profile.weight) if isinstance(profile.weight, Decimal) else profile.weight
    height = float(profile.height) if isinstance(profile.height, Decimal) else profile.height

    if profile.gender == 'üë®‚Äçü¶±–ú—É–∂—á–∏–Ω–∞':
        metabolism = round(88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * (datetime.now().year - profile.age)))
    elif profile.gender == 'üë©‚Äçü¶±–ñ–µ–Ω—â–∏–Ω–∞':
        metabolism = round(447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * (datetime.now().year - profile.age)))
    else:
        raise ValueError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª')

    return metabolism


def get_activity_coef(activity_level: int):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    activity_levels = {
        1: 1.2,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        2: 1.375,  # –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        3: 1.55,  # –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        4: 1.725,  # –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        5: 1.9  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    }
    return activity_levels.get(activity_level, 1.2)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def format_day_totals(day, totals, metabolism, protein_min):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –ø–æ –¥–Ω—é."""
    calorie_status = "–≤ –¥–µ—Ñ–∏—Ü–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π" if totals["calories"] < metabolism else "–≤ –∏–∑–±—ã—Ç–∫–µ –∫–∞–ª–æ—Ä–∏–π"
    protein_status = "–≤ –¥–µ—Ñ–∏—Ü–∏—Ç–µ –±–µ–ª–∫–∞" if totals["proteins"] < protein_min else "–≤ –Ω–æ—Ä–º–µ –ø–æ –±–µ–ª–∫—É"
    return (
        f"<b>–ò—Ç–æ–≥–æ –∑–∞ {day.strftime('%d.%m.%Y')} - {totals['calories']:.0f} –∫–∫–∞–ª ({calorie_status}), "
        f"–ë–ñ–£ - {totals['proteins']:.1f}/{totals['fats']:.1f}/{totals['carbohydrates']:.1f} "
        f"(–Ω–æ—Ä–º–∞ –±–µ–ª–∫–∞ {protein_min:.1f}, –≤—ã {protein_status})</b>\n"
    )


async def add_pressure_measurement(
        user_id: int, systolic: int, diastolic: int, pulse: int, comment: str = None
):
    async with AsyncSessionLocal() as session:
        async with session.begin():  # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —è–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏
            new_measurement = Pressure(
                user_id=user_id,
                systolic=systolic,
                diastolic=diastolic,
                pulse=pulse,
                comment=comment
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–µ—Å—Å–∏—é
            session.add(new_measurement)

        # –ö–æ–º–º–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è session.begin()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return new_measurement


async def get_pressures(user_id: int):
    async with AsyncSessionLocal() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        query = text("""select id, user_id, systolic, diastolic, pulse, comment, pressure.date AT TIME ZONE 'UTC' AT TIME ZONE timezone AS date from medicare.pressure
join medicare.profiles using(user_id)
where user_id = :user_id
order by pressure.date desc
limit 100
        """)
        result = await session.execute(query, {"user_id": user_id})
        row = result.fetchall()
        return row

async def insert_drug(user_id: int, name: str, admtime: str, measure: str = None, dosage: float = None, repeats: str = None):
    admtime = datetime.strptime(admtime, '%H:%M').time()
    async with AsyncSessionLocal() as session:
        async with session.begin():
            new_drug = Drug(
                user_id=user_id,
                name=name,
                measure=measure,
                dosage=dosage,
                admtime=admtime,
                repeats=repeats
            )
            session.add(new_drug)
        await session.commit()
        return new_drug

async def get_drugs_by_user(user_id: int):
    async with AsyncSessionLocal() as session:
        query = select(Drug).where(Drug.user_id == user_id)
        result = await session.execute(query)
        drugs = result.scalars().all()
        return drugs

async def insert_drug_adm(drug_id: int):
    async with AsyncSessionLocal() as session:
        new_adm = DrugAdm(drug_id=drug_id)
        session.add(new_adm)
        await session.commit()
# from datetime import datetime, timedelta
# print('---------------------')
# start_date = datetime.strptime('01.10.2024','%d.%m.%Y')
# end_date = datetime.strptime('06.10.2024','%d.%m.%Y')
# print(start_date)
#
# start_date = datetime.now() - timedelta(hours=200)
# end_date = datetime.now()
# print(start_date)
# asyncio.run(get_meal(4))