from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message
from keyboards.all_kb import main_kb, gender_kb
from keyboards.inline_kbs import (create_qst_inline_kb, get_login_tg, check_data,
                                  get_questionnaire, create_skip_button, get_activity_levels_kb)
from utils.utils import (get_random_person, get_msc_date, extract_number,
                         extract_year, get_timezone, extract_height)
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from create_bot import questions
import asyncio
from aiogram.utils.chat_action import ChatActionSender
from create_bot import bot, admins
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from db_handler.postgres_func import get_profile, upsert_profile, get_activity_levels_list
from html import escape


class Form(StatesGroup):
    gender = State()
    age = State()
    full_name = State()
    user_login = State()
    city = State()
    timezone = State()
    activity_level = State()
    height = State()
    weight = State()
    check_state = State()


questionnaire_router = Router()
questionnaire_router.message.filter(lambda message: message.photo or (message.text and not message.text.startswith('/')))

@questionnaire_router.message((F.text == 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É'))
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª: ', reply_markup=gender_kb())
    await state.set_state(Form.gender)

@questionnaire_router.callback_query(F.data == 'fill_profile')
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
        await call.message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª - —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –æ–±–º–µ–Ω–∞: ', reply_markup=gender_kb())
        await call.answer()
    await state.set_state(Form.gender)


@questionnaire_router.message((F.text.lower().contains('–º—É–∂—á–∏–Ω–∞')) | (F.text.lower().contains('–∂–µ–Ω—â–∏–Ω–∞')), Form.gender)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(gender=message.text, user_id=message.from_user.id)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer('–°—É–ø–µ—Ä! –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –≥–æ–¥ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è - —Ç–≤–æ–π'
                             ' –≤–æ–∑—Ä–∞—Å—Ç –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –Ω–æ—Ä–º: ', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.age)


@questionnaire_router.message(F.text, Form.gender)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç–µ—Ö —á—Ç–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ: ', reply_markup=gender_kb())
    await state.set_state(Form.gender)


@questionnaire_router.message(F.text, Form.age)
async def start_questionnaire_process(message: Message, state: FSMContext):
    check_age = extract_year(message.text)

    if not check_age:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (—á–∏—Å–ª–æ –æ—Ç 1900 –¥–æ 2024).")
        return

    await state.update_data(age=check_age)
    await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:', reply_markup=create_skip_button())
    await state.set_state(Form.full_name)

@questionnaire_router.callback_query(F.data == 'skip_question', Form.full_name)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(full_name=None)
    text = '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ'

    if message.from_user.username:
        text += ' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤–∞—à–∏–º –ª–æ–≥–∏–Ω–æ–º –±—É–¥–µ—Ç –ª–æ–≥–∏–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º: '
        await message.answer(text, reply_markup=get_login_tg())
    else:
        text += ' : '
        await message.answer(text)

    await state.set_state(Form.user_login)


@questionnaire_router.message(F.text, Form.full_name)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    text = '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ'

    if message.from_user.username:
        text += ' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤–∞—à–∏–º –ª–æ–≥–∏–Ω–æ–º –±—É–¥–µ—Ç –ª–æ–≥–∏–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º: '
        await message.answer(text, reply_markup=get_login_tg())
    else:
        text += ' : '
        await message.answer(text)

    await state.set_state(Form.user_login)

# –≤–∞—Ä–∏–∞–Ω—Ç –∫–æ–≥–¥–∞ –º—ã –±–µ—Ä–µ–º –ª–æ–≥–∏–Ω –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º
@questionnaire_router.callback_query(F.data, Form.user_login)
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    await call.answer('–ë–µ—Ä—É –ª–æ–≥–∏–Ω —Å —Ç–µ–ª–µ–≥—Ä–∞–º–º –ø—Ä–æ—Ñ–∏–ª—è')
    await call.message.edit_reply_markup(reply_markup=None)
    await state.update_data(user_login=call.from_user.username)
    await call.message.answer('–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Ç–≤–æ–µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: ')
    await state.set_state(Form.city)


# –≤–∞—Ä–∏–∞–Ω—Ç –∫–æ–≥–¥–∞ –º—ã –±–µ—Ä–µ–º –ª–æ–≥–∏–Ω –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@questionnaire_router.message(F.text, Form.user_login)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(user_login=message.text)
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ - —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: ')
    await state.set_state(Form.city)

@questionnaire_router.message(F.text, Form.city)
async def start_questionnaire_process(message: Message, state: FSMContext):
    tz, address = get_timezone(message.text)
    if not tz:
        await message.reply("–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–±—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
        return

    await state.update_data(city = address, timezone = tz)
    activity_levels = await get_activity_levels_list()
    activity_levels_card = '\n'.join([f'<b>{level.activity_level}. {level.description}</b>' for level in activity_levels])

    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n{activity_levels_card}',
                         reply_markup=get_activity_levels_kb())
    await state.set_state(Form.activity_level)

@questionnaire_router.callback_query(F.data, Form.activity_level)
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    level = call.data
    await call.answer(f'–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å {level}')
    await call.message.edit_reply_markup(reply_markup=None)
    await state.update_data(activity_level=int(level))
    await call.message.answer('–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–º: ')
    await state.set_state(Form.height)

@questionnaire_router.message(F.text, Form.height)
async def start_questionnaire_process(message: Message, state: FSMContext):
    check_height = extract_height(message.text)

    if not check_height:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –≤ —Å–º (—á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 300).")
        return

    await state.update_data(height=check_height)
    await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥:', reply_markup=create_skip_button())
    await state.set_state(Form.weight)

@questionnaire_router.message(F.text, Form.weight)
async def start_questionnaire_process(message: Message, state: FSMContext):
    check_weight = extract_height(message.text)

    if not check_weight:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–≥ (—á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 300).")
        return

    await state.update_data(weight=check_weight)
    data = await state.get_data()
    caption = f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ: \n\n' \
                  f'<b>–ü–æ–ª–Ω–æ–µ –∏–º—è</b>: {escape(data.get('full_name')) if data.get('full_name') else ' - '}\n' \
                  f'<b>–ü–æ–ª</b>: {data.get('gender') if data.get('gender') else ' - '}\n' \
                  f'<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {data.get('age') if data.get('age') else ' - '} –ª–µ—Ç\n' \
                  f'<b>–õ–æ–≥–∏–Ω –≤ –±–æ—Ç–µ</b>: {escape(data.get('user_login')) if data.get('user_login') else ' - '}\n' \
                  f'<b>–ì–æ—Ä–æ–¥</b>: {escape(data.get('city')) if data.get('city') else ' - '}\n' \
              f'<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b>: {escape(data.get('timezone')) if data.get('timezone') else ' - '}\n' \
              f'<b>–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>: {data.get('activity_level') if data.get('activity_level') else ' - '}\n' \
                      f'<b>–ú–æ–π —Ç–µ–∫—É—â–∏–π —Ä–æ—Å—Ç</b>: {data.get('height') if data.get('height') else ' - '}\n' \
                f'<b>–ú–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å</b>: {data.get('weight') if data.get('weight') else ' - '}\n'

    await message.answer(text=caption, reply_markup=check_data())
    await state.set_state(Form.check_state)

@questionnaire_router.callback_query(F.data =='skip_question', Form.weight)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(weight=None)
    data = await state.get_data()
    caption = f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ: \n\n' \
                  f'<b>–ü–æ–ª–Ω–æ–µ –∏–º—è</b>: {escape(data.get('full_name')) if data.get('full_name') else ' - '}\n' \
                  f'<b>–ü–æ–ª</b>: {data.get('gender') if data.get('gender') else ' - '}\n' \
                  f'<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {data.get('age') if data.get('age') else ' - '} –ª–µ—Ç\n' \
                  f'<b>–õ–æ–≥–∏–Ω –≤ –±–æ—Ç–µ</b>: {escape(data.get('user_login')) if data.get('user_login') else ' - '}\n' \
                  f'<b>–ì–æ—Ä–æ–¥</b>: {escape(data.get('city')) if data.get('city') else ' - '}\n' \
              f'<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b>: {escape(data.get('timezone')) if data.get('timezone') else ' - '}\n' \
              f'<b>–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>: {data.get('activity_level') if data.get('activity_level') else ' - '}\n' \
                      f'<b>–ú–æ–π —Ç–µ–∫—É—â–∏–π —Ä–æ—Å—Ç</b>: {data.get('height') if data.get('height') else ' - '}\n' \
                f'<b>–ú–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å</b>: {data.get('weight') if data.get('weight') else ' - '}\n'

    await message.answer(text=caption, reply_markup=check_data())
    await state.set_state(Form.check_state)
# @questionnaire_router.message(F.photo, Form.photo)
# async def start_questionnaire_process(message: Message, state: FSMContext):
#     photo_id = message.photo[-1].file_id
#     await state.update_data(photo=photo_id)
#     await message.answer('–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ: ')
#     await state.set_state(Form.about)
#
#
# @questionnaire_router.message(F.document.mime_type.startswith('image/'), Form.photo)
# async def start_questionnaire_process(message: Message, state: FSMContext):
#     photo_id = message.document.file_id
#     await state.update_data(photo=photo_id)
#     await message.answer('–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ: ')
#     await state.set_state(Form.about)


# @questionnaire_router.message(F.document, Form.photo)
# async def start_questionnaire_process(message: Message, state: FSMContext):
#     await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!')
#     await state.set_state(Form.photo)



# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
@questionnaire_router.callback_query(F.data == 'correct', Form.check_state)
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    print(data)
    await upsert_profile(**data)
    await call.answer('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
    await state.clear()


# –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É —Å–Ω–∞—á–∞–ª–∞
@questionnaire_router.callback_query(F.data == 'incorrect', Form.check_state)
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    await call.answer('–ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –Ω–∞—á–∞–ª–∞')
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.delete()
    await call.message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª: ', reply_markup=gender_kb())
    await state.set_state(Form.gender)