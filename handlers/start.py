from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message
from keyboards.all_kb import main_kb, gender_kb
from keyboards.inline_kbs import (create_qst_inline_kb, get_questionnaire, get_products_inline_kb,
                                  get_new_product_kb,get_pressure_kb, get_drugs_inline_kb)
from utils.utils import get_random_person, get_msc_date, extract_number
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from create_bot import questions
import asyncio
from aiogram.utils.chat_action import ChatActionSender
from create_bot import bot, admins
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from db_handler.postgres_func import (get_profile, upsert_profile, get_products,
                                      get_user_profile, get_pressures, get_drugs_by_user)
from handlers.pressure import Pressure
from handlers.drugs import Drug


from aiogram.enums import ParseMode
from html import escape

start_router = Router()
start_router.message.filter(lambda message: message.photo or (message.text and not message.text.startswith('/')))


@start_router.message(F.text == 'üìñ –û –Ω–∞—Å')
async def cmd_start_2(message: Message):
    await message.answer('–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:', reply_markup=create_qst_inline_kb(questions))


@start_router.message(F.text == 'ü•¨ –ú–æ—ë –º–µ–Ω—é')
async def answer_products(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    products = await get_products(user_id, 0)
    await message.answer(text='–ó–¥–µ—Å—å –≤–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã. –ü—Ä–æ–¥—É–∫—Ç—ã –º–æ–∂–Ω–æ –ª–∏—Å—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏ <b>–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è</b> –∏ <b>‚óÄÔ∏è –ù–∞–∑–∞–¥</b>.'
                              ' –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–∏—ë–º –ø–∏—â–∏, –Ω—É–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º. '
                              '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç ‚ûï</b>. –ï—Å–ª–∏ –≤–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞,'
                              ' –Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–ø—Ü–∏–µ–π <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º üßÆ</b>')
    if products:
        await message.answer('<b>–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b>',
                         reply_markup=get_products_inline_kb(0, user_id, products, max_items=6))
    else:
        await message.answer(text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?', reply_markup=get_new_product_kb())


@start_router.callback_query(F.data == 'back_home')
async def back_home(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer(text='/start', reply_markup=main_kb(call.message.from_user.id))
    await call.answer('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

@start_router.callback_query(F.data.startswith('qst_'))
async def cmd_start(call: CallbackQuery):
    qst_id = int(call.data.replace('qst_', ''))
    qst_data = questions[qst_id]
    msg_text = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n' \
               f'<b>{qst_data.get("answer")}</b>\n\n' \
               f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:'
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action="typing"):
        await call.message.answer(msg_text, reply_markup=create_qst_inline_kb(questions))
        await call.answer()

@start_router.message(F.text == "ü©∫ –ú–æ—ë –¥–∞–≤–ª–µ–Ω–∏–µ")
async def answer_pressure(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    pressures = await get_pressures(user_id)
    pressures = [f'{pressure.date.strftime("%d.%m.%Y %H:%M")} - {pressure.systolic}/{pressure.diastolic}, {pressure.pulse} {pressure.comment if pressure.comment else ""}' for
                 pressure in pressures]
    sent_message = await message.answer(f'–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è:\n{"\n".join(pressures)}')
    await message.answer(f'1. –í–Ω–µ—Å—Ç–∏ –¥–∞–≤–ª–µ–Ω–∏–µ, –ø—É–ª—å—Å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ - <b>120/80, 66, –ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Ö–æ—Ä–æ—à–æ</b>\n'
                         f'2. ...–ª–∏–±–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É <b>–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è</b>\n'
                        f'3. –ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞ –ø—Ä–æ—à–ª—ã–µ –ø–µ—Ä–∏–æ–¥—ã, –Ω–∞–∂–º–∏—Ç–µ <b>–ò–º–ø–æ—Ä—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞–≤–ª–µ–Ω–∏—è</b>', reply_markup=get_pressure_kb())
    await state.update_data(sent_message = sent_message.message_id)
    await state.set_state(Pressure.manual)

@start_router.message(F.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        data = await get_user_profile(user_id)
        if data:
            caption = f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: \n\n' \
                  f'<b>–ü–æ–ª–Ω–æ–µ –∏–º—è</b>: {escape(data.full_name) if data.full_name else ' - '}\n' \
                  f'<b>–ü–æ–ª</b>: {data.gender if data.gender else ' - '}\n' \
                  f'<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {data.age if data.age else ' - '} –ª–µ—Ç\n' \
                  f'<b>–õ–æ–≥–∏–Ω –≤ –±–æ—Ç–µ</b>: {escape(data.user_login) if data.user_login else ' - '}\n' \
                  f'<b>–ì–æ—Ä–æ–¥</b>: {escape(data.city) if data.city else ' - '}\n' \
                      f'<b>–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>: {data.description if data.description else ' - '}\n' \
                      f'<b>–ú–æ–π —Ç–µ–∫—É—â–∏–π —Ä–æ—Å—Ç</b>: {data.height if data.height else ' - '}\n' \
                f'<b>–ú–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å</b>: {data.weight if data.weight else ' - '}\n' \
                      f'<b>–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞</b>: {data.bmi if data.bmi else ' - '}\n' \
                      f'<b>–ú–æ—ë —Å—Ä–µ–¥–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ</b>: {data.pressure if data.pressure else ' - '}\n' \
                f'<b>–ú–æ–π —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å</b>: {data.pulse if data.pulse else ' - '}\n' \
                f'<b>–ú–æ—è —Å—Ä–µ–¥–Ω—è—è –≥–ª—é–∫–æ–∑–∞</b>: {data.glucose if data.glucose else ' - '}\n' \
                f'<b>–†–∞—Å—Å—á–µ—Ç–Ω—ã–π —Å—É—Ç–æ—á–Ω—ã–π –æ–±–º–µ–Ω</b>: {data.metabolism if data.metabolism else ' - '}'
            reply_markup = None
        else:
            caption = f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–Ω–∫–µ—Ç—É'
            reply_markup = get_questionnaire()

        await message.answer(text=caption, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

# @start_router.message(F.text == 'ü•¨ –ú–æ—ë –º–µ–Ω—é')
async def goto_products(call: CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = call.from_user.id
    products = await get_products(user_id, 0)
    await call.message.answer(text='–ó–¥–µ—Å—å –≤–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã. –ü—Ä–æ–¥—É–∫—Ç—ã –º–æ–∂–Ω–æ –ª–∏—Å—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏ <b>–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è</b> –∏ <b>‚óÄÔ∏è –ù–∞–∑–∞–¥</b>.'
                              ' –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–∏—ë–º –ø–∏—â–∏, –Ω—É–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º. '
                              '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç ‚ûï</b>. –ï—Å–ª–∏ –≤–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞,'
                              ' –Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–ø—Ü–∏–µ–π <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º üßÆ</b>')
    if products:
        await call.message.answer('<b>–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b>',
                         reply_markup=get_products_inline_kb(0, user_id, products, max_items=6))
    else:
        await call.message.answer(text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?', reply_markup=get_new_product_kb())

@start_router.message(F.text == 'üíä –ú–æ—è —Ç–∞–±–ª–µ—Ç–Ω–∏—Ü–∞')
async def cmd_new_pressure(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    items = await get_drugs_by_user(int(user_id))
    print('!!!!!!!!!!')
    print('items')
    print(items)
    sent_message = await message.answer('–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞', reply_markup=get_drugs_inline_kb(0, user_id, items))
    await state.update_data(user_id=message.from_user.id)
    await state.set_state(Drug.name)


