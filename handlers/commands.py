from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message
from keyboards.all_kb import main_kb, gender_kb
from keyboards.inline_kbs import create_qst_inline_kb, get_questionnaire, get_products_inline_kb, get_new_product_kb, \
    get_pressure_kb, get_drugs_kb, get_drugs_inline_kb
from utils.utils import get_random_person, get_msc_date, extract_number
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from create_bot import questions
import asyncio
from aiogram.utils.chat_action import ChatActionSender
from create_bot import bot, admins
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from db_handler.postgres_func import get_profile, upsert_profile, get_products, get_user_profile, get_pressures, \
    get_drugs_by_user
from handlers.meals import Meal
from handlers.pressure import Pressure
from handlers.products import Product
from handlers.drugs import Drug

from aiogram.enums import ParseMode
from html import escape

command_router = Router()
command_router.message.filter(lambda message: message.text and message.text.startswith('/'))

@command_router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject, state: FSMContext):
    await state.clear()
    command_args: str = command.args
    await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è.‚ùóÔ∏è'
            f' –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏, –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è –∏ –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ.'
            f' –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –≤–Ω–∏–∑—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥–Ω—ã–º –º–µ–Ω—é —Å–ª–µ–≤–∞',
            reply_markup=main_kb(message.from_user.id), parse_mode=ParseMode.HTML)

@command_router.message(Command('/faq'))
async def cmd_start_2(message: Message):
    await message.answer('–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:', reply_markup=create_qst_inline_kb(questions))

@command_router.message(Command('new_meal'))
async def start_product_process(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        products = await get_products(message.from_user.id, 0)
        sent_message = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–≤–æ–µ–≥–æ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ö –ë –ñ –£ –≤—Ä—É—á–Ω—É—é'
                                            ' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∫–∫–∞–ª, 20 –≥ –±–µ–ª–∫–∞, 10 –≥ –∂–∏—Ä–æ–≤, 30 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ –∑–∞–ø–∏—ã–≤–∞—é—Ç—Å—è —Ç–∞–∫:'
                                            ' 100 20 10 30. –ö–∞–ª–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, –ë–ñ–£ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                                                 reply_markup=get_products_inline_kb(page=0, user_id=message.from_user.id, items=products))
    # await call.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç')
    # user_messages[message.from_user.id] = [sent_message.message_id]
    await state.set_state(Meal.product_id)

@command_router.message(Command('new_product'))
async def start_product_process(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        sent_message = await message.answer('–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç?')
    # await call.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞')
    # user_messages[message.from_user.id] = [sent_message.message_id]
    await state.set_state(Product.product_name)

@command_router.message(Command('new_pressure'))
async def cmd_new_pressure(message: Message, state: FSMContext):
    await state.clear()
    sent_message = await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ', reply_markup=None)
    # user_messages[message.from_user.id] = [sent_message.message_id]
    await state.update_data(user_id=message.from_user.id)
    await state.set_state(Pressure.systolic)

@command_router.message(Command('pressure_report'))
async def cmd_new_pressure(message: Message, state: FSMContext):
    # await state.clear()
    user_id = message.from_user.id
    pressures = await get_pressures(user_id)
    pressures = [f'{pressure.date} - {pressure.systolic}/{pressure.diastolic}, {pressure.pulse} {pressure.comment}' for pressure in pressures]
    sent_message = await message.answer(f'–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è:\n{"\n".join(pressures)}\n'
                                        f'–ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞ –ø—Ä–æ—à–ª—ã–µ –ø–µ—Ä–∏–æ–¥—ã, –Ω–∞–∂–º–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞–≤–ª–µ–Ω–∏—è"',
                                        reply_markup=get_pressure_kb())
    # user_messages[message.from_user.id] = [sent_message.message_id]

# @command_router.message(Command('my_drugs'))
# async def cmd_new_drugs(message: Message, state: FSMContext):
#     # await state.clear()
#     user_id = message.from_user.id
#     # drugs = await get_drugs(user_id)
#     drugs = None
#     sent_message = await message.answer(f'–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å–µ–≥–æ–¥–Ω—è:\n{"\n".join(drugs)}\n'
#                                         f'–ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—Ä–∏—ë–º–æ–≤ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏, –Ω–∞–∂–º–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤"',
#                                         reply_markup=get_pressure_kb())

# @command_router.message(Command('new_drug'))
# async def cmd_new_drugs(message: Message, state: FSMContext):
#     # await state.clear()
#     user_id = message.from_user.id
#     # drugs = await get_drugs(user_id)
#     drugs = None
#     sent_message = await message.answer(f'–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å–µ–≥–æ–¥–Ω—è:\n{"\n".join(drugs)}\n'
#                                         f'–ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø—Ä–∏—ë–º–æ–≤ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏, –Ω–∞–∂–º–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤"',
#                                         reply_markup=get_drugs_kb())
#     await state.set_state(Drug.manual)

@command_router.message(Command('my_products'))
async def answer_products(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    products = await get_products(user_id, 0)
    await message.answer(text='–ó–¥–µ—Å—å –≤–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã. –ü—Ä–æ–¥—É–∫—Ç—ã –º–æ–∂–Ω–æ –ª–∏—Å—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏ <b>–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è</b> –∏ <b>‚óÄÔ∏è –ù–∞–∑–∞–¥</b>.'
                              ' –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–∏—ë–º –ø–∏—â–∏, –Ω—É–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º. '
                              '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç ‚ûï</b>. –ï—Å–ª–∏ –≤–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞,'
                              ' –Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–ø—Ü–∏–µ–π <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º üßÆ</b>')
    if products:
        await message.answer('<b>–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b>',
                         reply_markup=get_products_inline_kb(0, user_id, products, max_items=6))
    else:
        await message.answer(text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?', reply_markup=get_new_product_kb())

@command_router.message(Command('my_drugs'))
async def cmd_new_pressure(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    items = await get_drugs_by_user(int(user_id))
    sent_message = await message.answer('–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞', reply_markup=get_drugs_inline_kb(0, user_id, items))
    await state.update_data(user_id=message.from_user.id)
    await state.set_state(Drug.name)